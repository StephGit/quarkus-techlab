<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Quarkus Techlab â€“ 2. Implementing REST services in Quarkus</title><link>/quarkus-techlab/docs/02.0/</link><description>Recent content in 2. Implementing REST services in Quarkus on Quarkus Techlab</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/quarkus-techlab/docs/02.0/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 2.1 Your first Quarkus application</title><link>/quarkus-techlab/docs/02.0/first-application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/quarkus-techlab/docs/02.0/first-application/</guid><description>
&lt;h2 id="task-211-create-your-application">Task 2.1.1: Create your application&lt;/h2>
&lt;p>To create your first Quarkus application you have several possibilities:&lt;/p>
&lt;ul>
&lt;li>Create your application with the &lt;a href="https://code.quarkus.io/">Quickstart UI&lt;/a>&lt;/li>
&lt;li>Create your application with maven&lt;/li>
&lt;/ul>
&lt;p>To create your application with maven you can execute the following maven
command:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">
mvn io.quarkus:quarkus-maven-plugin:1.7.0.Final:create &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -DprojectGroupId&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>ch.puzzle &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -DprojectArtifactId&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>getting-started &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -DclassName&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ch.puzzle.quarkustechlab.GreetingResource&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -Dpath&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/hello&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Which creates a generated getting-started application bootstrapped for you. The
application holds at the moment a rest resource called &lt;code>GreetingResource.java&lt;/code>
which exposes a REST resource for you.
To test the application you can start the application in dev-mode by executing&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">
./mvnw compile quarkus:dev
&lt;/code>&lt;/pre>&lt;/div>&lt;p>The command starts the application in dev-mode which means you do have active
live reloading on each API call. Try hitting the API and test the
&lt;code>GreetingResource.java&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">
curl http://localhost:8080/hello
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should get the &amp;lsquo;hello&amp;rsquo; response in your console. Try altering the response
given in the &lt;code>GreetingResource.java&lt;/code> and hit the API again, Quarkus should perform
a live reload and print the altered response without manually restarting your
application.&lt;/p>
&lt;p>Other RESTeasy functionalities work like they always do. For further information on basic REST interaction with Quarkus see &lt;a href="https://quarkus.io/guides/rest-json">Documentation&lt;/a>.&lt;/p></description></item><item><title>Docs: 2.2 Impelementing RESTs Services</title><link>/quarkus-techlab/docs/02.0/implementing-rest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/quarkus-techlab/docs/02.0/implementing-rest/</guid><description>
&lt;h2 id="221-implementing-rest-services">2.2.1: Implementing REST Services&lt;/h2>
&lt;p>In this section we learn how microservices can communicate through REST. In this example we want to build a microservice which produces random data when it&amp;rsquo;s REST interface is called. Another microservice consumes then the data and exposes it on ot&amp;rsquo;s own endpoint.&lt;/p>
&lt;h3 id="222-producing-data">2.2.2: Producing Data&lt;/h3>
&lt;p>Create a new Quarkus application like shown before called &amp;lsquo;data-producer&amp;rsquo;. The application should expose a &lt;code>DataResource&lt;/code> on the path &amp;ldquo;/data&amp;rdquo; which provides the user with a randomly generated double when requested.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">
mvn io.quarkus:quarkus-maven-plugin:1.7.0.Final:create &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -DprojectGroupId&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>ch.puzzle &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -DprojectArtifactId&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>data-producer &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -DclassName&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ch.puzzle.quarkustechlab.restproducer.boundary.DataResource&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -Dpath&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/data&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To write better APIs and share data over our defined resources, we need the &amp;lsquo;resteasy-jsonb&amp;rsquo; extension which provides us with
JSON-B functionalities for our REST interfaces.
To add an extension to your existing Quarkus application simply use:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">
./mvnw quarkus:add-extension -Dextensions&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;quarkus-resteasy-jsonb&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To see the available extensions you can use:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">
./mvnw quarkus:list-extensions
&lt;/code>&lt;/pre>&lt;/div>&lt;p>You are also able to just add the new dependency to your &lt;code>pom.yml&lt;/code> manually.&lt;/p>
&lt;p>In the generated DataResource edit the &lt;code>@GET&lt;/code> endpoint to return a simple double and change the &lt;code>@Produces&lt;/code> type to &lt;code>MediaType.APPLICATION_JSON&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#5c35cc;font-weight:bold">@GET&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Produces&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">MediaType&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">APPLICATION_JSON&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">double&lt;/span> &lt;span style="color:#000">produceData&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">Math&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">random&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span> &lt;span style="color:#000">10&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In our lab we want to transfer sensor measurements between our microservices. Create a new class &lt;code>SensorMeasurement&lt;/code> with a single public field called data which holds a Double. In the constructor assign the data field a random generated Double. Edit your REST resource to return a new &lt;code>SensorMeasurement&lt;/code> whenever it&amp;rsquo;s called.&lt;/p>
&lt;p>It should look something like this:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">SensorMeasurement&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">Double&lt;/span> &lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">SensorMeasurement&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">this&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">data&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">Math&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">random&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#5c35cc;font-weight:bold">@Path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/data&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">DataResource&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@GET&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Produces&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">MediaType&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">APPLICATION_JSON&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">SensorMeasurement&lt;/span> &lt;span style="color:#000">produceData&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#204a87;font-weight:bold">new&lt;/span> &lt;span style="color:#000">SensorMeasurement&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Please update or delete the generated tests which Quarkus provides when generating a project. They will not be needed any further and only have demonstration purposes.&lt;/p>
&lt;p>For more information about writing REST APIs with Quarkus see the &lt;a href="https://quarkus.io/guides/rest-json">documentation&lt;/a>&lt;/p>
&lt;h3 id="223-consuming-data">2.2.3: Consuming Data&lt;/h3>
&lt;p>With another microservice we would like to consume the data served by our data-producer. Create another quarkus application called &amp;lsquo;data-consumer&amp;rsquo; with the follwing extensions: &amp;ldquo;rest-client, resteasy-jsonb&amp;rdquo;.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">
mvn io.quarkus:quarkus-maven-plugin:1.7.0.Final:create &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -DprojectGroupId&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>ch.puzzle &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -DprojectArtifactId&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>data-consumer &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -DclassName&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;ch.puzzle.quarkustechlab.restconsumer.boundary.DataConsumer&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -Dpath&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/data&amp;#34;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span> -Dextensions&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;rest-client, resteasy-jsonb&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the data-consumer microservice we will have another resource on the path &amp;ldquo;/data&amp;rdquo; which serves for now as a proxy to our data-producer. We will consume the data-producer microservices API with a service called &lt;code>DataProducerService&lt;/code>. To achieve that, generate an interface called &lt;code>DataProducerService&lt;/code> which mirrors the data-producer&amp;rsquo;s DataResource. Annotate the &lt;code>DataProducerService&lt;/code> with the MicroProfile annotation &lt;code>@RegisterRestClient&lt;/code> to allow Quarkus to acces the interface for CDI Injection as a REST Client.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#8f5902;font-style:italic">// DataProducerService
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/data&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@RegisterRestClient&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000">DataProducerService&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@GET&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Produces&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;application/json&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">SensorMeasurement&lt;/span> &lt;span style="color:#000">getSensorMeasurement&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Implement the same POJO as in the producer again for the data-consumer project.&lt;/p>
&lt;p>To access the defined interface as a RestClient we need to configure it properly. To configure the rest client we can edit our &lt;code>application.properties&lt;/code>.
We need to define at least the base url which the RestClient should use and the default injection scope for the CDI bean.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>ch.puzzle.quarkustechlab.restconsumer.boundary.DataProducerService/mp-rest/url=http&lt;span style="color:#000;font-weight:bold">:&lt;/span>//localhost&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8080&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>ch.puzzle.quarkustechlab.restconsumer.boundary.DataProducerService/mp-rest/scope=javax.inject.Singleton&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When managing multiple RestClients the configuration with the fully qualified name of the class (&lt;code>ch.puzzle.quarkustechlab.restconsumer.boundary.DataProducerService&lt;/code>) the readability suffers pretty fast. You can extend the annotation of the RestClient (&lt;code>@RegisterRestClient&lt;/code>) with a configKey property to shorten the configurations.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#8f5902;font-style:italic">// DataProducerService
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[...]&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/data&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@RegisterRestClient&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">configKey&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;data-producer-api&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">interface&lt;/span> &lt;span style="color:#000">DataProducerService&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[...]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#8f5902;font-style:italic">// application.properties
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">producer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">api&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">mp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">rest&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">url&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">http&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">:&lt;/span>&lt;span style="color:#8f5902;font-style:italic">//localhost:8080
&lt;/span>&lt;span style="color:#8f5902;font-style:italic">&lt;/span>&lt;span style="color:#000">data&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">producer&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">api&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">mp&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">-&lt;/span>&lt;span style="color:#000">rest&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">/&lt;/span>&lt;span style="color:#000">scope&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#000">javax&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">inject&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">Singleton&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To use the registered RestClient in our application inject it into the DataConsumerResource and simply call the defined interface&amp;rsquo;s method. To inject a RestClient into your desired class create a field of type &lt;code>DataProducerService dataProducerService&lt;/code> and annotate it with &lt;code>@RestClient&lt;/code>.
You can edit our resource in the data-consumer to use the &lt;code>DataProducerService&lt;/code> to create a proxy consuming the data-producer&amp;rsquo;s API and return it.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#5c35cc;font-weight:bold">@Path&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;/data&amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#204a87;font-weight:bold">class&lt;/span> &lt;span style="color:#000">DataConsumerResource&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@RestClient&lt;/span>
&lt;span style="color:#000">DataProducerService&lt;/span> &lt;span style="color:#000">dataProducerService&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">;&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@GET&lt;/span>
&lt;span style="color:#5c35cc;font-weight:bold">@Produces&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#000">MediaType&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">APPLICATION_JSON&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">public&lt;/span> &lt;span style="color:#000">SensorMeasurement&lt;/span> &lt;span style="color:#000">getData&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">()&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#204a87;font-weight:bold">return&lt;/span> &lt;span style="color:#000">dataProducerService&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#c4a000">getSensorMeasurement&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">();&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>To run both microservices you have to alter the &lt;code>application.properties&lt;/code> of the consumer and change it&amp;rsquo;s default port. Simply add &lt;code>quarkus.http.port=8081&lt;/code> to your &lt;code>application.properties&lt;/code> and the default port will be changed.&lt;/p>
&lt;p>When you have both microservices running, try sending a request to the consumer. You will see that we receive a SensorMeasurement, which the data-producer produced.&lt;/p></description></item></channel></rss>